kurtosis(x.wei) ## kurtosis of a Weibull distribution
# Get the gamma parameters lambda and alpha.
x.gam <- rgamma(200, rate=0.5, shape=3.5) ## sampling from a gamma distribution with λ=0.5 (scale parameter 12) and α=3.5 (shape parameter)
med.gam <- mean(x.gam) ## sample mean
var.gam <- var(x.gam) ## sample variance
l.est <- med.gam/var.gam ## lambda estimate (corresponds to rate)
a.est <- ((med.gam)^2)/var.gam ## alfa estimate
# Fit distributions
#install.packages("MASS")
library(MASS) ## loading package MASS
fitdistr(x.gam, "gamma") ## fitting gamma pdf parameters
fitdistr(x.wei, densfun=dweibull, start=list(scale=1, shape=2))## fitting Weibull pdf parameters
fitdistr(x.norm,"normal") ## fitting gaussian pdf parameters
## -------------- Goodness of Fit --------------
lambda.est <- mean(x.poi) ## estimate of parameter lambda
tab.os <- table(x.poi)## table with empirical frequencies
freq.os <- vector()
for(i in 1: length(tab.os)) freq.os[i]<-tab.os[[i]] ## vector of empirical frequencies
freq.ex<-(dpois(0:max(x.poi),lambda=lambda.est)*200) ## vector of fitted (expected) frequencies
acc <- mean(abs(freq.os-trunc(freq.ex))) ## absolute goodness of fit index
acc/mean(freq.os)*100 ## relative (percent) goodness of fit index
# The pdf curve and histogram plotted together.
h <- hist(x.norm, breaks=15)
xhist <- c(min(h$breaks), h$breaks)
yhist <- c(0, h$density, 0)
xfit <- seq(min(x.norm), max(x.norm), length=40)
yfit <- dnorm(xfit, mean=mean(x.norm), sd=sd(x.norm))
plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
histogram")
lines(xfit, yfit, col="red")
# Chi-square goodness test
#install.packages("vcd")
library(vcd) ## loading vcd package
gf <- goodfit(x.poi, type="poisson", method="MinChisq")
summary(gf)
plot(gf, main="Count data vs Poisson distribution")
# Continous distribution chi-square test
x.gam.cut<-cut(x.gam,breaks=c(0,3,6,9,12,18)) ##binning data
table(x.gam.cut) ## binned data table
## computing expected frequencies
f.ex<-c(20,71,61,31,17) ## expected frequencies vector
f.os<-vector()
for(i in 1:5) f.os[i] <- table(x.gam.cut)[[i]] ## empirical frequencies
X2 <- sum(((f.os-f.ex)^2)/f.ex) ## chi-square statistic
gdl <- 5-2-1 ## degrees of freedom
#1-pchisq(X2,gdl) ## p-value
## computing relative expected frequencies
p<-c((pgamma(3,shape=3.5,rate=0.5)-pgamma(0,shape=3.5,rate=0.5)),
(pgamma(6,shape=3.5,rate=0.5)-pgamma(3,shape=3.5,rate=0.5)),
(pgamma(9,shape=3.5,rate=0.5)-pgamma(6,shape=3.5,rate=0.5)),
(pgamma(12,shape=3.5,rate=0.5)-pgamma(9,shape=3.5,rate=0.5)),
(pgamma(18,shape=3.5,rate=0.5)-pgamma(12,shape=3.5,rate=0.5)))
chisq.test(x=f.os,p=p) ## chi-square test
# Kolmogorov-Smirnov goodness test
ks.test(x.wei,"pweibull", shape=2,scale=1)
# Show true and approximated Weibull
x <- seq(0,2,0.1)
plot(x, pweibull(x,scale=1,shape=2),type="l",col="red", main="ECDF and Weibull CDF")
plot(ecdf(x.wei),add=TRUE)
# Shapiro-Wilk test
shapiro.test(x.norm)
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
aggregate(cbind(colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])) ~ date, data=bus_AZU_Centraal, sum)
# The tram prognosis data in both directions.
tram <- read.csv("Data/Input/passengerprognose.csv",
header= FALSE, sep=";")
colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])
v <- colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])
aggregate(cbind(colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])) ~ 1, data=bus_AZU_Centraal, sum)
aggregate(cbind(colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])) ~ 1+2, data=bus_AZU_Centraal, sum)
# The tram prognosis data in both directions.
aggregate(cbind(colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])) ~ date, data=bus_AZU_Centraal, sum)
#aggregate(cbind(colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])) ~ date, data=bus_AZU_Centraal, sum)
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Group.date = bus_AZU_Centraal$Date))
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date))
assenger arrivals within an hour per day.
#aggregate(cbind(colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])) ~ date, data=bus_AZU_Centraal, sum)
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date))
Sum all passenger arrivals within an hour per day.
#aggregate(cbind(colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])) ~ date, data=bus_AZU_Centraal, sum)
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Group.date = bus_AZU_Centraal$Date))
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
#aggregate(cbind(colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])) ~ date, data=bus_AZU_Centraal, sum)
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date))
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date),
Time = bus_AZU_Centraal$Departure))
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = bus_AZU_Centraal$Departure))
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = bus_AZU_Centraal$Departure))
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(
Time = bus_AZU_Centraal$Departure))
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = bus_AZU_Centraal$Departure))
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = bus_AZU_Centraal$Departure))
# First sort by time, then by date to have an ordering of days and their hours.
bus_AZU_Centraal <- bus_AZU_Centraal[order(Time),]
bus_AZU_Centraal <- bus_AZU_Centraal[order(Date),]
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = bus_AZU_Centraal$Departure))
# First sort by time, then by date to have an ordering of days and their hours.
bus_AZU_Centraal <- bus_AZU_Centraal[order(bus_AZU_Centraal$Time),]
bus_AZU_Centraal <- bus_AZU_Centraal[order(bus_AZU_Centraal$Date),]
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = bus_AZU_Centraal$Departure))
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
bus_AZU_Centraal <- bus_AZU_Centraal[order(bus_AZU_Centraal$Date, bus_AZU_Centraal$Time),]
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# First sort by time and by date to have an ordering of days and their hours.
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y")),,drop=FALSE]
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = bus_AZU_Centraal$Departure))
# First sort by time and by date to have an ordering of days and their hours.
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y")),,drop=FALSE]
# Remove unnecessary row number.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-row.names)
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = bus_AZU_Centraal$Departure))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y"),
as.POSIXlt(bus_AZU_Centraal$Time)),,drop=FALSE]
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = bus_AZU_Centraal$Departure))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y"),
as.POSIXlt(bus_AZU_Centraal$Time, format="%H:%M")),,drop=FALSE]
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = bus_AZU_Centraal$Departure))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
bus_AZU_Centraal <- bus_AZU_Centraal[order(
as.POSIXlt(bus_AZU_Centraal$Time, format="%H:%M"), as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y")),,drop=FALSE]
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = bus_AZU_Centraal$Departure))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y"),
as.POSIXlt(bus_AZU_Centraal$Time, format="%H:%M")),,drop=FALSE]
# Remove unnecessary row names.
row.names(bus_AZU_Centraal) <- NULL
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Hour = cut(as.POSIXct(bus_AZU_Centraal$Departure), "hour"))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y"),
as.POSIXlt(bus_AZU_Centraal$Hour, format="%H:%M")),,drop=FALSE]
# Remove unnecessary row names.
row.names(bus_AZU_Centraal) <- NULL
erarrival times via a Poisson proces.
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Hour = cut(as.POSIXct(bus_AZU_Centraal$Departure), "hour"))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y"),
as.POSIXlt(bus_AZU_Centraal$Hour, format="%H")),,drop=FALSE]
# Remove unnecessary row names.
row.names(bus_AZU_Centraal) <- NULL
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Hour = cut(as.POSIXct(bus_AZU_Centraal$Departure), "hour")))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y"),
as.POSIXlt(bus_AZU_Centraal$Hour, format="%H")),,drop=FALSE]
# Remove unnecessary row names.
row.names(bus_AZU_Centraal) <- NULL
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Hour = cut(as.POSIXct(bus_AZU_Centraal$Departure), format="%H%M")))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y"),
as.POSIXlt(bus_AZU_Centraal$Hour, format="%H")),,drop=FALSE]
# Remove unnecessary row names.
row.names(bus_AZU_Centraal) <- NULL
# The tram prognosis data in both directions.
tram <- read.csv("Data/Input/passengerprognose.csv",
header= FALSE, sep=";")
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Hour = cut(as.POSIXct(bus_AZU_Centraal$Departure), format="%H%M")))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y"),
as.POSIXlt(bus_AZU_Centraal$Hour, format="%H%M")),,drop=FALSE]
# Remove unnecessary row names.
row.names(bus_AZU_Centraal) <- NULL
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("Data/Input/12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("Data/Input/12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Hour = cut(as.POSIXct(bus_AZU_Centraal$Departure), format="%H%M", "hour")))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date,format="%d-%m-%Y"),
as.POSIXlt(bus_AZU_Centraal$Hour, format="%H%M")),,drop=FALSE]
# Remove unnecessary row names.
row.names(bus_AZU_Centraal) <- NULL
View(bus_AZU_Centraal)
View(bus_AZU_Centraal)
