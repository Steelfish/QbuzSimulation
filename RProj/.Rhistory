col='blue',
main="Weibull distribution", type='l')
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
plotNormalDistribution <- function(x, mean, sd) {
# The pdf curve and histogram plotted together.
h <- hist(drivingTimes)
xhist <- c(min(h$breaks), h$breaks)
yhist <- c(0, h$density, 0)
xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
histogram")
lines(xfit, yfit, col="red")
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
plotNormalDistribution <- function(x, mean, sd) {
plotNormalDistribution <- function(x, mean, sd) {
# The pdf curve and histogram plotted together.
h <- hist(drivingTimes, breaks=15)
xhist <- c(min(h$breaks), h$breaks)
yhist <- c(0, h$density, 0)
xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
histogram")
lines(xfit, yfit, col="red")
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
plotNormalDistribution <- function(x, mean, sd) {
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks = 15, ylim = c(0, 0.025), xlab = xlabel, ylab = ylabel,
main = paste('Histogram of', subject, 'with Normal Density Curve')
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks = 15, ylim = c(0, 0.025), xlab = xlabel, ylab = ylabel,
main = paste('Histogram of', subject, 'with Normal Density Curve')
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks = 15, ylim = c(0, 0.025), xlab = xlabel, ylab = ylabel,
main = paste('Histogram of', subject, 'with Normal Density Curve')
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks = 15, ylim = c(0, 0.025), xlab = xlabel, ylab = ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve")
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks = 15, ylim = c(0, 0.025), xlab = xlabel, ylab = ylabel,
main=paste("Histogram of", "hi", "with Normal Density Curve")
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks = 15, ylim = c(0, 0.025), xlab = xlabel, ylab = ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x, breaks=15)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks = 15, ylim = c(0, 0.025), xlab = xlabel, ylab = ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks=15, ylim=c(0, x.ylim.normal), xlab=xlabel, ylab=ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks=15, ylim=c(0, x.histogram), xlab=xlabel, ylab=ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks=15, ylim=c(0, x.histogram$density), xlab=xlabel, ylab=ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks=15, ylim=c(0, max(x.histogram$density), xlab=xlabel, ylab=ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks=15, ylim=c(0, max(x.histogram$density), xlab=xlabel, ylab=ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks=15, ylim=c(0, max(x.histogram$density)), xlab=xlabel, ylab=ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks=15, ylim=c(0, 1000), xlab=xlabel, ylab=ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks=15, ylim=c(0, max(x.histogram$count)), xlab=xlabel, ylab=ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks=15, ylim=c(0, max(x.histogram$count)), xlab=xlabel, ylab=ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), col="red", add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
##########################################
# Tram properties Nieuwegeinlijn fitting
##########################################
# The driving times for the tram on the Nieuwegein tram line.
nieuwegein <- read.csv("runtimes.csv",
header= TRUE, sep=";")
# The average driving time per stop.
averageNieuwegein <- colMeans(nieuwegein)
# The driving times to Graadt van Roggenweg.
drivingTimes <- nieuwegein[,1]
# Fit distributions
# https://www.r-bloggers.com/goodness-of-fit-test-in-r/
#install.packages("MASS")
library(MASS) ## loading package MASS
normalFit <- fitdistr(drivingTimes, "normal") ## fitting gaussian pdf parameters
gammaFit <- fitdistr(drivingTimes, "gamma") ## fitting gamma pdf parameters
weibullFit <- fitdistr(drivingTimes, "weibull") ## fitting Weibull pdf parameters
# Kolmogorov-Smirnov goodness test for the fitted distributions.
# Note that as the driving times are discrete, multiple occurrences of a value are possible.
# This is not allowed for the continuous test, thus we add small amounts of noise to the driving times.
ks.test(jitter(drivingTimes), "pnorm", mean=normalFit$estimate[1], sd=normalFit$estimate[2])
ks.test(jitter(drivingTimes), "pgamma", shape=gammaFit$estimate[2], rate=gammaFit$estimate[1])
ks.test(jitter(drivingTimes),"pweibull", shape=weibullFit$estimate[2], scale=weibullFit$estimate[1])
shapiro.test(drivingTimes)
# Plot the distributions.
plot(x, dgamma(x, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1]),
col='blue',
main="Gamma", type='l')
plot(x, dnorm(x, mean=normalFit$estimate[1], sd=normalFit$estimate[2]),
col='blue',
main="Normal distribution", type='l')
plot(x, dweibull(x, shape=weibullFit$estimate[2], scale=weibullFit$estimate[1]),
col='blue',
main="Weibull distribution", type='l')
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks=15, ylim=c(0, max(x.histogram$count)), xlab=xlabel, ylab=ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), col="red", add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
ks.test(jitter(drivingTimes), "pnorm", mean=normalFit$estimate[1], sd=normalFit$estimate[2])
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean, sd))
hist(x, breaks=15, ylim=c(0, 10), xlab=xlabel, ylab=ylabel,
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean, sd), col="red", add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# histogram with gamma density curve
png('img/plot_gamma-histogram.png')
hist(x, breaks=15, freq=F, ylim=c(0, max(x.histogram$count)),
xlab=xlabel, ylab=ylabel, main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape, scale), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# histogram with gamma density curve
png('img/plot_gamma-histogram.png')
hist(x, breaks=15, freq=F, ylim=c(0, max(x.histogram$count)),
xlab=xlabel, ylab=ylabel, main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape, scale), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# histogram with gamma density curve
png('img/plot_gamma-histogram.png')
hist(x, breaks=15, freq=F, ylim=c(0, max(x)),
xlab=xlabel, ylab=ylabel, main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape, scale), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# histogram with gamma density curve
png('img/plot_gamma-histogram.png')
hist(x, breaks=15, ylim=c(0, max(x)),
xlab=xlabel, ylab=ylabel, main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape, scale), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
#This average per hour can then be used as the rate parameter to generate
#interarrival times via a Poisson proces.
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = as.POSIXlt(strptime(bus_AZU_Centraal$Departure, format="%H:%M"))$hour))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
bus_AZU_Centraal <- bus_AZU_Centraal[order(as.Date(bus_AZU_Centraal$Date, format="%d-%m-%Y"),
as.POSIXlt(bus_AZU_Centraal$Time, format="%H:%M"),drop=FALSE)]
#
# # Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Hour = cut(as.POSIXct(bus_AZU_Centraal$Departure), format="%H%M", "hour")))
Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregate(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
FUN = sum,
by = list(Date = bus_AZU_Centraal$Date,
Time = as.POSIXlt(strptime(bus_AZU_Centraal$Departure, format="%H:%M"))$hour))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
View(bus_AZU_Centraal)
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
bus_AZU_Centraal <- read.csv("12a.csv",
header= TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
bus_Centraal_AZU <- read.csv("12b.csv",
header= TRUE, sep=";")
# Remove unnecessary Trip information.
bus_AZU_Centraal <- subset(bus_AZU_Centraal, select=-Trip)
bus_Centraal_AZU <- subset(bus_Centraal_AZU, select=-Trip)
to.period(bus_AZU_Centraal, "minutes", 15)
# Sum all passenger arrivals within an hour per day.
bus_AZU_Centraal <- aggregatets(x = bus_AZU_Centraal[colnames(bus_AZU_Centraal[,3:ncol(bus_AZU_Centraal)])],
on="minuts", k=15)
