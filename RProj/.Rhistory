xlabel="Driving time (seconds)", ylabel="Frequency", subject=paste("driving times (", stopName, ")")
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# Plot the histogram with normal density curve.
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
png(paste('img/plot_normal-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png(paste('img/plot_gamma-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
analyzeDrivingTimesPerStop(drivingTimes[,stopName], stopName)
}
}
analyzeDrivingTimesPerStop <- function(drivingTimes, stopName)
{
# Fit distributions
# https://www.r-bloggers.com/goodness-of-fit-test-in-r/
#install.packages("MASS")
library(MASS) ## loading package MASS
normalFit <- fitdistr(drivingTimes, "normal") ## fitting gaussian pdf parameters
gammaFit <- fitdistr(drivingTimes, "gamma") ## fitting gamma pdf parameters
weibullFit <- fitdistr(drivingTimes, "weibull") ## fitting Weibull pdf parameters
# Kolmogorov-Smirnov goodness test for the fitted distributions.
# Note that as the driving times are discrete, multiple occurrences of a value are possible.
# This is not allowed for the continuous test, thus we add small amounts of noise to the driving times.
ks.test(jitter(drivingTimes), "pnorm", mean=normalFit$estimate[1], sd=normalFit$estimate[2])
ks.test(jitter(drivingTimes), "pgamma", shape=gammaFit$estimate[2], rate=gammaFit$estimate[1])
ks.test(jitter(drivingTimes),"pweibull", shape=weibullFit$estimate[2], scale=weibullFit$estimate[1])
shapiro.test(drivingTimes)
# Chi-squared test
library(vcd)## loading vcd package
gf <- goodfit(drivingTimes, type="poisson", method="MinChisq")
summary(gf)
# Plot the distributions.
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject=paste("driving times (", stopName, ")")
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject=paste("driving times (", stopName, ")")
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# Plot the histogram with normal density curve.
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
png(paste('img/plot_normal-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png(paste('img/plot_gamma-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
analyzeDrivingTimes(nieuwegein)
Tram properties Nieuwegeinlijn fitting
##########################################
# The driving times for the tram on the Nieuwegein tram line.
nieuwegein <- read.csv("runtimes.csv",
header= TRUE, sep=";")
# The average driving time per stop.
averageNieuwegein <- colMeans(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
analyzeDrivingTimesPerStop(drivingTimes[,stopName], stopName)
}
}
analyzeDrivingTimesPerStop <- function(drivingTimes, stopName)
{
# Fit distributions
# https://www.r-bloggers.com/goodness-of-fit-test-in-r/
#install.packages("MASS")
library(MASS) ## loading package MASS
normalFit <- fitdistr(drivingTimes, "normal") ## fitting gaussian pdf parameters
gammaFit <- fitdistr(drivingTimes, "gamma") ## fitting gamma pdf parameters
weibullFit <- fitdistr(drivingTimes, "weibull") ## fitting Weibull pdf parameters
# Kolmogorov-Smirnov goodness test for the fitted distributions.
# Note that as the driving times are discrete, multiple occurrences of a value are possible.
# This is not allowed for the continuous test, thus we add small amounts of noise to the driving times.
ks.test(jitter(drivingTimes), "pnorm", mean=normalFit$estimate[1], sd=normalFit$estimate[2])
ks.test(jitter(drivingTimes), "pgamma", shape=gammaFit$estimate[2], rate=gammaFit$estimate[1])
ks.test(jitter(drivingTimes),"pweibull", shape=weibullFit$estimate[2], scale=weibullFit$estimate[1])
shapiro.test(drivingTimes)
# Chi-squared test
library(vcd)## loading vcd package
gf <- goodfit(drivingTimes, type="poisson", method="MinChisq")
summary(gf)
# Plot the distributions.
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject=paste("driving times (", stopName, ")",)
stopName)
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject=paste("driving times (", stopName, ")")
stopName)
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject, stopName) {
# Plot the histogram with normal density curve.
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
png(paste('img/plot_normal-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject, stopName) {
# Plot the histogram with gamma density curve.
png(paste('img/plot_gamma-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
analyzeDrivingTimes(nieuwegein)
# The average driving time per stop.
averageNieuwegein <- colMeans(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
analyzeDrivingTimesPerStop(drivingTimes[,stopName], stopName=stopName)
}
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
analyzeDrivingTimesPerStop(drivingTimes=drivingTimes[,stopName], stopName=stopName)
}
}
analyzeDrivingTimes(nieuwegein)
View(nieuwegein)
View(nieuwegein)
View(arrivals_AZU_Centraal)
View(arrivals_AZU_Centraal)
View(prognosis_Centraal_AZU)
View(prognosis_Centraal_AZU)
prognosis_AZU_Centraal$X24u.entry <- prognosis_AZU_Centraal$X24u.entry / 24
prognosis_AZU_Centraal$X24u.exit <- prognosis_AZU_Centraal$X24u.exit / 24
View(prognosis_Centraal_AZU)
View(prognosis_Centraal_AZU)
cale the entry and exit amounts by the tram passenger prognosis.
prognosis_AZU_Centraal <- read.csv("passengerprognosea.csv",
header=TRUE, sep=";")
prognosis_Centraal_AZU <- read.csv("passengerprognoseb.csv",
header=TRUE, sep=";")
prognosis_AZU_Centraal$X24u.entry <- prognosis_AZU_Centraal$X24u.entry / 24
prognosis_AZU_Centraal$X24u.exit <- prognosis_AZU_Centraal$X24u.exit / 24
prognosis_AZU_Centraal$X24u.entry <- prognosis_AZU_Centraal$X24u.entry / 24
prognosis_AZU_Centraal$X24u.exit = prognosis_AZU_Centraal$X24u.exit / 24
prognosis_AZU_Centraal$X24u.entry = as.integer(prognosis_AZU_Centraal$X24u.entry) / 24
c(10,20,30)/24
prognosis_AZU_Centraal$X24u.entry/24
prognosis_AZU_Centraal$X24u.entry
prognosis_AZU_Centraal$X24u_entry
prognosis_AZU_Centraal$X24u_entry/24
prognosis_AZU_Centraal$X24u_entry = prognosis_AZU_Centraal$X24u_entry / 24
prognosis_AZU_Centraal$X24u_exit = prognosis_AZU_Centraal$X24u_exit / 24
prognosis_AZU_Centraal$X24u_entry = prognosis_AZU_Centraal$X24u_entry / 24
View(prognosis_AZU_Centraal)
View(prognosis_AZU_Centraal)
#Fitting a distribution for the amount of passengers per hour.
#This average per hour can then be used as the rate parameter to generate
#interarrival times via a Poisson proces.
processBusData <- function(busData)
{
# Remove unnecessary Trip information.
busData <- subset(busData, select=-Trip)
# Sum all passenger arrivals within an hour per day.
busData <- aggregate(x = busData[colnames(busData[,3:ncol(busData)])],
FUN = sum,
by = list(Date = busData$Date,
Time = as.POSIXlt(strptime(busData$Departure, format="%H:%M"))$hour))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
#busData <- busData[order(as.Date(busData$Date, format="%d-%m-%Y"),
#                                 as.POSIXlt(busData$Time, format="%H:%M", origin="1970-01-01")),
#                                 drop=FALSE]
# Remove unnecessary row names.
row.names(busData) <- NULL
# Sum all passenger arrivals within an hour per day.
busData <- aggregate(x = busData[colnames(busData[,3:ncol(busData)])],
FUN = mean,
by = list(Time = busData$Time))
return(busData)
}
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
arrivals_AZU_Centraal <- read.csv("12a_entering.csv",
header=TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
arrivals_Centraal_AZU <- read.csv("12b_entering.csv",
header=TRUE, sep=";")
arrivals_AZU_Centraal <- processBusData(arrivals_AZU_Centraal)
arrivals_Centraal_AZU <- processBusData(arrivals_Centraal_AZU)
#Fitting a distribution for the amount of passengers per hour.
#This average per hour can then be used as the probability of having a stop as a destination.
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
destinations_AZU_Centraal <- read.csv("12a_leaving.csv",
header=TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
destinations_Centraal_AZU <- read.csv("12b_leaving.csv",
header=TRUE, sep=";")
destinations_AZU_Centraal <- processBusData(destinations_AZU_Centraal)
destinations_Centraal_AZU <- processBusData(destinations_Centraal_AZU)
processTramPrognosisData <- function(tramPrognosisData)
{
# Turn the 24 hour sum of passengers into an hourly average over
# the amount of hours in a transportation day (16).
tramPrognosisData$X24u_entry = tramPrognosisData$X24u_entry / 16
tramPrognosisData$X24u_exit = tramPrognosisData$X24u_exit / 16
}
# Scale the entry and exit amounts by the tram passenger prognosis.
prognosis_AZU_Centraal <- read.csv("passengerprognosea.csv",
header=TRUE, sep=";")
prognosis_Centraal_AZU <- read.csv("passengerprognoseb.csv",
header=TRUE, sep=";")
prognosis_AZU_Centraal <- processTramPrognosisData(prognosis_AZU_Centraal)
prognosis_Centraal_AZU <- processTramPrognosisData(prognosis_Centraal_AZU)
#Fitting a distribution for the amount of passengers per hour.
#This average per hour can then be used as the rate parameter to generate
#interarrival times via a Poisson proces.
processBusData <- function(busData)
{
# Remove unnecessary Trip information.
busData <- subset(busData, select=-Trip)
# Sum all passenger arrivals within an hour per day.
busData <- aggregate(x = busData[colnames(busData[,3:ncol(busData)])],
FUN = sum,
by = list(Date = busData$Date,
Time = as.POSIXlt(strptime(busData$Departure, format="%H:%M"))$hour))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
#busData <- busData[order(as.Date(busData$Date, format="%d-%m-%Y"),
#                                 as.POSIXlt(busData$Time, format="%H:%M", origin="1970-01-01")),
#                                 drop=FALSE]
# Remove unnecessary row names.
row.names(busData) <- NULL
# Sum all passenger arrivals within an hour per day.
busData <- aggregate(x = busData[colnames(busData[,3:ncol(busData)])],
FUN = mean,
by = list(Time = busData$Time))
return(busData)
}
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
arrivals_AZU_Centraal <- read.csv("12a_entering.csv",
header=TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
arrivals_Centraal_AZU <- read.csv("12b_entering.csv",
header=TRUE, sep=";")
arrivals_AZU_Centraal <- processBusData(arrivals_AZU_Centraal)
arrivals_Centraal_AZU <- processBusData(arrivals_Centraal_AZU)
#Fitting a distribution for the amount of passengers per hour.
#This average per hour can then be used as the probability of having a stop as a destination.
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
destinations_AZU_Centraal <- read.csv("12a_leaving.csv",
header=TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
destinations_Centraal_AZU <- read.csv("12b_leaving.csv",
header=TRUE, sep=";")
destinations_AZU_Centraal <- processBusData(destinations_AZU_Centraal)
destinations_Centraal_AZU <- processBusData(destinations_Centraal_AZU)
processTramPrognosisData <- function(tramPrognosisData)
{
# Turn the 24 hour sum of passengers into an hourly average over
# the amount of hours in a transportation day (16).
tramPrognosisData$X24u_entry = tramPrognosisData$X24u_entry / 16
tramPrognosisData$X24u_exit = tramPrognosisData$X24u_exit / 16
return(tramPrognosisData)
}
# Scale the entry and exit amounts by the tram passenger prognosis.
prognosis_AZU_Centraal <- read.csv("passengerprognosea.csv",
header=TRUE, sep=";")
prognosis_Centraal_AZU <- read.csv("passengerprognoseb.csv",
header=TRUE, sep=";")
prognosis_AZU_Centraal <- processTramPrognosisData(prognosis_AZU_Centraal)
prognosis_Centraal_AZU <- processTramPrognosisData(prognosis_Centraal_AZU)
View(prognosis_AZU_Centraal)
View(prognosis_AZU_Centraal)
View(prognosis_Centraal_AZU)
View(prognosis_Centraal_AZU)
#Fitting a distribution for the amount of passengers per hour.
#This average per hour can then be used as the rate parameter to generate
#interarrival times via a Poisson proces.
processBusData <- function(busData)
{
# Remove unnecessary Trip information.
busData <- subset(busData, select=-Trip)
# Sum all passenger arrivals within an hour per day.
busData <- aggregate(x = busData[colnames(busData[,3:ncol(busData)])],
FUN = sum,
by = list(Date = busData$Date,
Time = as.POSIXlt(strptime(busData$Departure, format="%H:%M"))$hour))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
#busData <- busData[order(as.Date(busData$Date, format="%d-%m-%Y"),
#                                 as.POSIXlt(busData$Time, format="%H:%M", origin="1970-01-01")),
#                                 drop=FALSE]
# Remove unnecessary row names.
row.names(busData) <- NULL
# Sum all passenger arrivals within an hour per day.
busData <- aggregate(x = busData[colnames(busData[,3:ncol(busData)])],
FUN = mean,
by = list(Time = busData$Time))
return(busData)
}
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
arrivals_AZU_Centraal <- read.csv("12a_entering.csv",
header=TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
arrivals_Centraal_AZU <- read.csv("12b_entering.csv",
header=TRUE, sep=";")
arrivals_AZU_Centraal <- processBusData(arrivals_AZU_Centraal)
arrivals_Centraal_AZU <- processBusData(arrivals_Centraal_AZU)
#Fitting a distribution for the amount of passengers per hour.
#This average per hour can then be used as the probability of having a stop as a destination.
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
destinations_AZU_Centraal <- read.csv("12a_leaving.csv",
header=TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
destinations_Centraal_AZU <- read.csv("12b_leaving.csv",
header=TRUE, sep=";")
destinations_AZU_Centraal <- processBusData(destinations_AZU_Centraal)
destinations_Centraal_AZU <- processBusData(destinations_Centraal_AZU)
processTramPrognosisData <- function(tramPrognosisData)
{
# Turn the 24 hour sum of passengers into an hourly average over
# the amount of hours in a transportation day (16).
tramPrognosisData$X24u_entry = tramPrognosisData$X24u_entry / 16
tramPrognosisData$X24u_exit = tramPrognosisData$X24u_exit / 16
return(tramPrognosisData)
}
# Scale the entry and exit amounts by the tram passenger prognosis.
prognosis_AZU_Centraal <- read.csv("passengerprognosea.csv",
header=TRUE, sep=";")
prognosis_Centraal_AZU <- read.csv("passengerprognoseb.csv",
header=TRUE, sep=";")
prognosis_AZU_Centraal <- processTramPrognosisData(prognosis_AZU_Centraal)
prognosis_Centraal_AZU <- processTramPrognosisData(prognosis_Centraal_AZU)
View(arrivals_AZU_Centraal)
View(arrivals_AZU_Centraal)
#Fitting a distribution for the amount of passengers per hour.
#This average per hour can then be used as the rate parameter to generate
#interarrival times via a Poisson proces.
processBusData <- function(busData)
{
# Remove unnecessary Trip information.
busData <- subset(busData, select=-Trip)
# Sum all passenger arrivals within an hour per day.
busData <- aggregate(x = busData[colnames(busData[,3:ncol(busData)])],
FUN = sum,
by = list(Date = busData$Date,
Time = as.POSIXlt(strptime(busData$Departure, format="%H:%M"))$hour))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
#busData <- busData[order(as.Date(busData$Date, format="%d-%m-%Y"),
#                                 as.POSIXlt(busData$Time, format="%H:%M", origin="1970-01-01")),
#                                 drop=FALSE]
# Remove unnecessary row names.
row.names(busData) <- NULL
# Sum all passenger arrivals within an hour per day.
busData <- aggregate(x = busData[colnames(busData[,3:ncol(busData)])],
FUN = mean,
by = list(Time = busData$Time))
return(busData)
}
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
arrivals_AZU_Centraal <- read.csv("12a_entering.csv",
header=TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
arrivals_Centraal_AZU <- read.csv("12b_entering.csv",
header=TRUE, sep=";")
arrivals_AZU_Centraal <- processBusData(arrivals_AZU_Centraal)
arrivals_Centraal_AZU <- processBusData(arrivals_Centraal_AZU)
#Fitting a distribution for the amount of passengers per hour.
#This average per hour can then be used as the probability of having a stop as a destination.
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
destinations_AZU_Centraal <- read.csv("12a_leaving.csv",
header=TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
destinations_Centraal_AZU <- read.csv("12b_leaving.csv",
header=TRUE, sep=";")
destinations_AZU_Centraal <- processBusData(destinations_AZU_Centraal)
destinations_Centraal_AZU <- processBusData(destinations_Centraal_AZU)
processTramPrognosisData <- function(tramPrognosisData)
{
# Turn the 24 hour sum of passengers into an hourly average over
# the amount of hours in a transportation day (16).
tramPrognosisData$X24u_entry = tramPrognosisData$X24u_entry / 16
tramPrognosisData$X24u_exit = tramPrognosisData$X24u_exit / 16
return(tramPrognosisData)
}
# Scale the entry and exit amounts by the tram passenger prognosis.
prognosis_AZU_Centraal <- read.csv("passengerprognosea.csv",
header=TRUE, sep=";")
prognosis_Centraal_AZU <- read.csv("passengerprognoseb.csv",
header=TRUE, sep=";")
prognosis_AZU_Centraal <- processTramPrognosisData(prognosis_AZU_Centraal)
prognosis_Centraal_AZU <- processTramPrognosisData(prognosis_Centraal_AZU)
write.csv(file="arrivals_AZU_Centraal", x=arrivals_AZU_Centraal)
write.csv(file="arrivals_Centraal_AZU", x=arrivals_Centraal_AZU)
write.csv(file="destinations_AZU_Centraal", x=destinations_AZU_Centraal)
write.csv(file="destinations_Centraal_AZU", x=destinations_Centraal_AZU)
write.csv(file="destinations_Centraal_AZU.csv", x=destinations_Centraal_AZU)
#Fitting a distribution for the amount of passengers per hour.
#This average per hour can then be used as the rate parameter to generate
#interarrival times via a Poisson proces.
processBusData <- function(busData)
{
# Remove unnecessary Trip information.
busData <- subset(busData, select=-Trip)
# Sum all passenger arrivals within an hour per day.
busData <- aggregate(x = busData[colnames(busData[,3:ncol(busData)])],
FUN = sum,
by = list(Date = busData$Date,
Time = as.POSIXlt(strptime(busData$Departure, format="%H:%M"))$hour))
# https://stackoverflow.com/questions/13649019/with-r-split-time-series-data-into-time-intervals-say-an-hour-and-then-plot-t
# First sort by time and by date to have an ordering of days and their hours.
# https://stackoverflow.com/questions/10683224/obtain-hour-from-datetime-vector
#busData <- busData[order(as.Date(busData$Date, format="%d-%m-%Y"),
#                                 as.POSIXlt(busData$Time, format="%H:%M", origin="1970-01-01")),
#                                 drop=FALSE]
# Remove unnecessary row names.
row.names(busData) <- NULL
# Sum all passenger arrivals within an hour per day.
busData <- aggregate(x = busData[colnames(busData[,3:ncol(busData)])],
FUN = mean,
by = list(Time = busData$Time))
return(busData)
}
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
arrivals_AZU_Centraal <- read.csv("12a_entering.csv",
header=TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
arrivals_Centraal_AZU <- read.csv("12b_entering.csv",
header=TRUE, sep=";")
arrivals_AZU_Centraal <- processBusData(arrivals_AZU_Centraal)
arrivals_Centraal_AZU <- processBusData(arrivals_Centraal_AZU)
#Fitting a distribution for the amount of passengers per hour.
#This average per hour can then be used as the probability of having a stop as a destination.
# The bus data going from AZU, Heidelberglaan, De Kromme Rijn, Stadion Galgenwaard,
#                         Rubenslaan, Sterrenwijk, Bleekstraat to CS Centrumzijde.
destinations_AZU_Centraal <- read.csv("12a_leaving.csv",
header=TRUE, sep=";")
# The bus data going from CS Centrumzijde, Bleekstraat, Sterrenwijk, Rubenslaan,
#                         Stadion Galgenwaard, De Kromme Rijn, Heidelberglaan to AZU.
destinations_Centraal_AZU <- read.csv("12b_leaving.csv",
header=TRUE, sep=";")
destinations_AZU_Centraal <- processBusData(destinations_AZU_Centraal)
destinations_Centraal_AZU <- processBusData(destinations_Centraal_AZU)
processTramPrognosisData <- function(tramPrognosisData)
{
# Turn the 24 hour sum of passengers into an hourly average over
# the amount of hours in a transportation day (16).
tramPrognosisData$X24u_entry = tramPrognosisData$X24u_entry / 16
tramPrognosisData$X24u_exit = tramPrognosisData$X24u_exit / 16
return(tramPrognosisData)
}
# Scale the entry and exit amounts by the tram passenger prognosis.
prognosis_AZU_Centraal <- read.csv("passengerprognosea.csv",
header=TRUE, sep=";")
prognosis_Centraal_AZU <- read.csv("passengerprognoseb.csv",
header=TRUE, sep=";")
prognosis_AZU_Centraal <- processTramPrognosisData(prognosis_AZU_Centraal)
prognosis_Centraal_AZU <- processTramPrognosisData(prognosis_Centraal_AZU)
write.csv(file="arrivals_AZU_Centraal.csv", x=arrivals_AZU_Centraal)
write.csv(file="arrivals_Centraal_AZU.csv", x=arrivals_Centraal_AZU)
write.csv(file="destinations_AZU_Centraal.csv", x=destinations_AZU_Centraal)
write.csv(file="destinations_Centraal_AZU.csv", x=destinations_Centraal_AZU)
View(arrivals_AZU_Centraal)
View(arrivals_AZU_Centraal)
View(arrivals_AZU_Centraal)
View(arrivals_AZU_Centraal)
