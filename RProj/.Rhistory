main=paste("Histogram of", subject, "with Normal Density Curve"))
#curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject="driving times")
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
# The pdf curve and histogram plotted together.
#     h <- hist(drivingTimes, breaks=15)
#     xhist <- c(min(h$breaks), h$breaks)
#     yhist <- c(0, h$density, 0)
#     xfit <- seq(min(drivingTimes), max(drivingTimes), length=40)
#     yfit <- dnorm(xfit, mean=normalFit$estimate[1], sd=normalFit$estimate[2])
#     plot(xhist, yhist, type="s", ylim=c(0,max(yhist, yfit)), main="Normal pdf and
#          histogram")
#     lines(xfit, yfit, col="red")
png('img/plot_normal-histogram.png')
x.histogram = hist(x)
x.ylim.normal = range(0, x.histogram$density, dnorm(x, mean=mean, sd=sd))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject="driving times")
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
png('img/plot_normal-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject="driving times")
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png('img/plot_gamma-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape, scale), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png('img/plot_gamma-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png('img/plot_gamma-histogram.png')
hist(x, breaks=30, freq=TRUE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
gammaFit <- fitdistr(drivingTimes, "gamma") ## fitting gamma pdf parameters
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png('img/plot_gamma-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
View(nieuwegein)
View(nieuwegein)
# The average driving time per stop.
averageNieuwegein <- colMeans(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for (name in names(drivingTimes))
{
analyzeDrivingTimesPerStop(drivingTimes$name)
}
}
analyzeDrivingTimesPerStop <- function(drivingTimes)
{
# Fit distributions
# https://www.r-bloggers.com/goodness-of-fit-test-in-r/
#install.packages("MASS")
library(MASS) ## loading package MASS
normalFit <- fitdistr(drivingTimes, "normal") ## fitting gaussian pdf parameters
gammaFit <- fitdistr(drivingTimes, "gamma") ## fitting gamma pdf parameters
weibullFit <- fitdistr(drivingTimes, "weibull") ## fitting Weibull pdf parameters
# Kolmogorov-Smirnov goodness test for the fitted distributions.
# Note that as the driving times are discrete, multiple occurrences of a value are possible.
# This is not allowed for the continuous test, thus we add small amounts of noise to the driving times.
ks.test(jitter(drivingTimes), "pnorm", mean=normalFit$estimate[1], sd=normalFit$estimate[2])
ks.test(jitter(drivingTimes), "pgamma", shape=gammaFit$estimate[2], rate=gammaFit$estimate[1])
ks.test(jitter(drivingTimes),"pweibull", shape=weibullFit$estimate[2], scale=weibullFit$estimate[1])
shapiro.test(drivingTimes)
# Chi-squared test
library(vcd)## loading vcd package
gf <- goodfit(drivingTimes, type="poisson", method="MinChisq")
summary(gf)
# Plot the distributions.
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject="driving times")
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# Plot the histogram with normal density curve.
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
png('img/plot_normal-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png('img/plot_gamma-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimesPerStop <- function(drivingTimes)
{
print(drivingTimes)
# Fit distributions
# https://www.r-bloggers.com/goodness-of-fit-test-in-r/
#install.packages("MASS")
library(MASS) ## loading package MASS
normalFit <- fitdistr(drivingTimes, "normal") ## fitting gaussian pdf parameters
gammaFit <- fitdistr(drivingTimes, "gamma") ## fitting gamma pdf parameters
weibullFit <- fitdistr(drivingTimes, "weibull") ## fitting Weibull pdf parameters
# Kolmogorov-Smirnov goodness test for the fitted distributions.
# Note that as the driving times are discrete, multiple occurrences of a value are possible.
# This is not allowed for the continuous test, thus we add small amounts of noise to the driving times.
ks.test(jitter(drivingTimes), "pnorm", mean=normalFit$estimate[1], sd=normalFit$estimate[2])
ks.test(jitter(drivingTimes), "pgamma", shape=gammaFit$estimate[2], rate=gammaFit$estimate[1])
ks.test(jitter(drivingTimes),"pweibull", shape=weibullFit$estimate[2], scale=weibullFit$estimate[1])
shapiro.test(drivingTimes)
# Chi-squared test
library(vcd)## loading vcd package
gf <- goodfit(drivingTimes, type="poisson", method="MinChisq")
summary(gf)
# Plot the distributions.
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject="driving times")
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# Plot the histogram with normal density curve.
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
png('img/plot_normal-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png('img/plot_gamma-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for (name in names(drivingTimes))
{
print(name)
print(drivingTimes$name)
analyzeDrivingTimesPerStop(drivingTimes$name)
}
}
analyzeDrivingTimes(nieuwegein)
View(nieuwegein)
View(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
lapply(drivingTimes, analyzeDrivingTimesPerStop)
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
lapply(drivingTimes, analyzeDrivingTimesPerStop)
}
analyzeDrivingTimesPerStop <- function(drivingTimes)
{
# Fit distributions
# https://www.r-bloggers.com/goodness-of-fit-test-in-r/
#install.packages("MASS")
library(MASS) ## loading package MASS
normalFit <- fitdistr(drivingTimes, "normal") ## fitting gaussian pdf parameters
gammaFit <- fitdistr(drivingTimes, "gamma") ## fitting gamma pdf parameters
weibullFit <- fitdistr(drivingTimes, "weibull") ## fitting Weibull pdf parameters
# Kolmogorov-Smirnov goodness test for the fitted distributions.
# Note that as the driving times are discrete, multiple occurrences of a value are possible.
# This is not allowed for the continuous test, thus we add small amounts of noise to the driving times.
ks.test(jitter(drivingTimes), "pnorm", mean=normalFit$estimate[1], sd=normalFit$estimate[2])
ks.test(jitter(drivingTimes), "pgamma", shape=gammaFit$estimate[2], rate=gammaFit$estimate[1])
ks.test(jitter(drivingTimes),"pweibull", shape=weibullFit$estimate[2], scale=weibullFit$estimate[1])
shapiro.test(drivingTimes)
# Chi-squared test
library(vcd)## loading vcd package
gf <- goodfit(drivingTimes, type="poisson", method="MinChisq")
summary(gf)
# Plot the distributions.
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject="driving times")
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# Plot the histogram with normal density curve.
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
png('img/plot_normal-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png('img/plot_gamma-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimesPerStop <- function(drivingTimes)
{
print(names(drivingTimes))
# Fit distributions
# https://www.r-bloggers.com/goodness-of-fit-test-in-r/
#install.packages("MASS")
library(MASS) ## loading package MASS
normalFit <- fitdistr(drivingTimes, "normal") ## fitting gaussian pdf parameters
gammaFit <- fitdistr(drivingTimes, "gamma") ## fitting gamma pdf parameters
weibullFit <- fitdistr(drivingTimes, "weibull") ## fitting Weibull pdf parameters
# Kolmogorov-Smirnov goodness test for the fitted distributions.
# Note that as the driving times are discrete, multiple occurrences of a value are possible.
# This is not allowed for the continuous test, thus we add small amounts of noise to the driving times.
ks.test(jitter(drivingTimes), "pnorm", mean=normalFit$estimate[1], sd=normalFit$estimate[2])
ks.test(jitter(drivingTimes), "pgamma", shape=gammaFit$estimate[2], rate=gammaFit$estimate[1])
ks.test(jitter(drivingTimes),"pweibull", shape=weibullFit$estimate[2], scale=weibullFit$estimate[1])
shapiro.test(drivingTimes)
# Chi-squared test
library(vcd)## loading vcd package
gf <- goodfit(drivingTimes, type="poisson", method="MinChisq")
summary(gf)
# Plot the distributions.
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject="driving times")
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject="driving times")
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# Plot the histogram with normal density curve.
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
png('img/plot_normal-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png('img/plot_gamma-histogram.png')
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(name in names(drivingTimes))
{
print(name)
}
#lapply(drivingTimes, analyzeDrivingTimesPerStop)
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
print(drivinTimes[,stopName])
analyzeDrivingTimesPerStop(drivingTimes, stopName)
}
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
print(drivingTimes[,stopName])
analyzeDrivingTimesPerStop(drivingTimes, stopName)
}
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
analyzeDrivingTimesPerStop(drivingTimes[,stopName], stopName)
}
}
analyzeDrivingTimes(nieuwegein)
# The driving times for the tram on the Nieuwegein tram line.
nieuwegein <- read.csv("runtimes.csv",
header= TRUE, sep=";")
# The average driving time per stop.
averageNieuwegein <- colMeans(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
analyzeDrivingTimesPerStop(drivingTimes[,stopName], stopName)
}
}
analyzeDrivingTimesPerStop <- function(drivingTimes, stopName)
{
# Fit distributions
# https://www.r-bloggers.com/goodness-of-fit-test-in-r/
#install.packages("MASS")
library(MASS) ## loading package MASS
normalFit <- fitdistr(drivingTimes, "normal") ## fitting gaussian pdf parameters
gammaFit <- fitdistr(drivingTimes, "gamma") ## fitting gamma pdf parameters
weibullFit <- fitdistr(drivingTimes, "weibull") ## fitting Weibull pdf parameters
# Kolmogorov-Smirnov goodness test for the fitted distributions.
# Note that as the driving times are discrete, multiple occurrences of a value are possible.
# This is not allowed for the continuous test, thus we add small amounts of noise to the driving times.
ks.test(jitter(drivingTimes), "pnorm", mean=normalFit$estimate[1], sd=normalFit$estimate[2])
ks.test(jitter(drivingTimes), "pgamma", shape=gammaFit$estimate[2], rate=gammaFit$estimate[1])
ks.test(jitter(drivingTimes),"pweibull", shape=weibullFit$estimate[2], scale=weibullFit$estimate[1])
shapiro.test(drivingTimes)
# Chi-squared test
library(vcd)## loading vcd package
gf <- goodfit(drivingTimes, type="poisson", method="MinChisq")
summary(gf)
# Plot the distributions.
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject=paste("driving times (", stopName, ")")
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject=paste("driving times (", stopName, ")")
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# Plot the histogram with normal density curve.
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
png(paste('img/plot_normal-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png(paste('img/plot_gamma-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
analyzeDrivingTimesPerStop(drivingTimes[,stopName], stopName)
}
}
analyzeDrivingTimesPerStop <- function(drivingTimes, stopName)
{
# Fit distributions
# https://www.r-bloggers.com/goodness-of-fit-test-in-r/
#install.packages("MASS")
library(MASS) ## loading package MASS
normalFit <- fitdistr(drivingTimes, "normal") ## fitting gaussian pdf parameters
gammaFit <- fitdistr(drivingTimes, "gamma") ## fitting gamma pdf parameters
weibullFit <- fitdistr(drivingTimes, "weibull") ## fitting Weibull pdf parameters
# Kolmogorov-Smirnov goodness test for the fitted distributions.
# Note that as the driving times are discrete, multiple occurrences of a value are possible.
# This is not allowed for the continuous test, thus we add small amounts of noise to the driving times.
ks.test(jitter(drivingTimes), "pnorm", mean=normalFit$estimate[1], sd=normalFit$estimate[2])
ks.test(jitter(drivingTimes), "pgamma", shape=gammaFit$estimate[2], rate=gammaFit$estimate[1])
ks.test(jitter(drivingTimes),"pweibull", shape=weibullFit$estimate[2], scale=weibullFit$estimate[1])
shapiro.test(drivingTimes)
# Chi-squared test
library(vcd)## loading vcd package
gf <- goodfit(drivingTimes, type="poisson", method="MinChisq")
summary(gf)
# Plot the distributions.
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject=paste("driving times (", stopName, ")")
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject=paste("driving times (", stopName, ")")
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject) {
# Plot the histogram with normal density curve.
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
png(paste('img/plot_normal-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject) {
# Plot the histogram with gamma density curve.
png(paste('img/plot_gamma-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
analyzeDrivingTimes(nieuwegein)
Tram properties Nieuwegeinlijn fitting
##########################################
# The driving times for the tram on the Nieuwegein tram line.
nieuwegein <- read.csv("runtimes.csv",
header= TRUE, sep=";")
# The average driving time per stop.
averageNieuwegein <- colMeans(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
analyzeDrivingTimesPerStop(drivingTimes[,stopName], stopName)
}
}
analyzeDrivingTimesPerStop <- function(drivingTimes, stopName)
{
# Fit distributions
# https://www.r-bloggers.com/goodness-of-fit-test-in-r/
#install.packages("MASS")
library(MASS) ## loading package MASS
normalFit <- fitdistr(drivingTimes, "normal") ## fitting gaussian pdf parameters
gammaFit <- fitdistr(drivingTimes, "gamma") ## fitting gamma pdf parameters
weibullFit <- fitdistr(drivingTimes, "weibull") ## fitting Weibull pdf parameters
# Kolmogorov-Smirnov goodness test for the fitted distributions.
# Note that as the driving times are discrete, multiple occurrences of a value are possible.
# This is not allowed for the continuous test, thus we add small amounts of noise to the driving times.
ks.test(jitter(drivingTimes), "pnorm", mean=normalFit$estimate[1], sd=normalFit$estimate[2])
ks.test(jitter(drivingTimes), "pgamma", shape=gammaFit$estimate[2], rate=gammaFit$estimate[1])
ks.test(jitter(drivingTimes),"pweibull", shape=weibullFit$estimate[2], scale=weibullFit$estimate[1])
shapiro.test(drivingTimes)
# Chi-squared test
library(vcd)## loading vcd package
gf <- goodfit(drivingTimes, type="poisson", method="MinChisq")
summary(gf)
# Plot the distributions.
plotNormalDistribution(drivingTimes, mean=normalFit$estimate[1], sd=normalFit$estimate[2],
xlabel="Driving time (seconds)", ylabel="Density", subject=paste("driving times (", stopName, ")",)
stopName)
plotGammaDistribution(drivingTimes, shape=gammaFit$estimate[2], scale=gammaFit$estimate[1],
xlabel="Driving time (seconds)", ylabel="Frequency", subject=paste("driving times (", stopName, ")")
stopName)
}
plotNormalDistribution <- function(x, mean, sd, xlabel, ylabel, subject, stopName) {
# Plot the histogram with normal density curve.
# Source: https://www.r-bloggers.com/exploratory-data-analysis-combining-histograms-and-density-plots-to-examine-the-distribution-of-the-ozone-pollution-data-from-new-york-in-r/
png(paste('img/plot_normal-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Normal Density Curve"))
curve(dnorm(x, mean=mean, sd=sd), col="red", add=TRUE)
dev.off()
}
plotGammaDistribution <- function(x, shape, scale, xlabel, ylabel, subject, stopName) {
# Plot the histogram with gamma density curve.
png(paste('img/plot_gamma-histogram_', stopName, '.png', sep=''))
hist(x, breaks=30, freq=FALSE, xlab=xlabel, ylab=ylabel, col="lightgray",
main=paste("Histogram of", subject, "with Gamma Density Curve"))
curve(dgamma(x, shape=shape, scale=scale), col="red", add=TRUE)
dev.off()
}
analyzeDrivingTimes(nieuwegein)
# The average driving time per stop.
averageNieuwegein <- colMeans(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
analyzeDrivingTimesPerStop(drivingTimes[,stopName], stopName=stopName)
}
}
analyzeDrivingTimes(nieuwegein)
analyzeDrivingTimes <- function(drivingTimes)
{
for(stopName in names(drivingTimes))
{
analyzeDrivingTimesPerStop(drivingTimes=drivingTimes[,stopName], stopName=stopName)
}
}
analyzeDrivingTimes(nieuwegein)
View(nieuwegein)
View(nieuwegein)
